
# üßê Proposition de strat√©gie de s√©curisation d'une application 

##  Introduction 

Hello, today we are going to talk about the security strategy. More specifically, we will discuss the risks and security issues to guarantee the integrity of the data that our future users will entrust to us through the application. 

## Sommaire 

- üó∫Ô∏è [La s√©curisation d'une application]() 
	- üëÄ [Que veut dire s√©curiser une application ?]() 
- üö®[Confidentialit√©]() 
- üìù [Les strat√©gies g√©n√©rales de la s√©curisation]() 
	- üê±‚Äçüíª[R√©duction de la surface d'attaque]() 
	- üîí [Moindre privil√®ge]() 
	- ‚õ® [D√©fense en profondeur]() 
- üíÇ [S√©curisation Client]() 
	- [Inclusion de s√©curit√© de contenus de tiers]()
		- Partage de ressources inter-origine (CORS)
		- Politique de s√©curit√© du contenu (CSP)
		- Politique de la m√™me origine (SOP)
		- Int√©grit√© des sous-ressources (SRI)
	- [ClickJacking]()
	- [Requ√™te silencieuse]()
	- [HTTPS / TLS / HSTS]()
	- [Politique de s√©curit√© des mot de passe]()
- üíÇ [S√©curisation Backend]() 
	- [Journalisation]()
	- [Sanitization]()
	- [Strat√©gie de sauvegarde]()
	- [Salage / Hashage / Sha256]()
	- [Authentification et Autorisation]()
	- [Strict mode]()
	- [Sessions]()
	- [RBAC]()
	- [Token (JWT)]()
- üíæ [S√©curisation BDD]() 
- üì°[S√©curisation API]() 

## üîê La s√©curisation d'une application

Processus qui consiste √† d√©velopper, ajouter et tester des fonctionnalit√©s de s√©curit√© au sein des **applications**, afin d'√©viter l**es vuln√©rabilit√©s** face √† des menaces telles que **les acc√®s et les modifications non autoris√©s**.


### Quoi ?

La gestion de la s√©curit√© des applications est le processus qui consiste √† d√©velopper, ajouter et tester des fonctionnalit√©s de s√©curit√© au sein des applications, afin d‚Äô√©viter les vuln√©rabilit√©s face √† des menaces telles que les acc√®s et les modifications non autoris√©s.

### Pourquoi ?

La s√©curit√© des  **applications**  web est essentielle pour prot√©ger les donn√©es, les clients et les organisations contre le vol de donn√©es, les interruptions de la continuit√© des activit√©s ou d'autres cons√©quences n√©fastes de la cybercriminalit√©.

## ‚öñÔ∏è Confidentialit√©

En sachant que votre application **vas √™tre amener a recueillir des donn√©es utilisateur** ( nom, pr√©nom, email, t√©l√©phone, pi√®ces jointe ) il est **essentiel de noter** que ces **donn√©es** ne peuvent √™tre **trait√©es ult√©rieurement** pour d‚Äôautres finalit√©s, **surtout si elles sont incompatibles avec les finalit√©s pr√©vues initialement**.

> Si l‚Äôapplication propose des fonctionnalit√©s permettant d‚Äôassurer un **service √† distance** √† son utilisateur et qu‚Äôelle comporte une connexion ext√©rieure (ex : sauvegarde des donn√©es dans le  _cloud_), **des r√®gles s‚Äôapplique**.
> -   Les grands principes relatifs √† la protection des donn√©es doivent √™tre respect√©s, d√®s la conception de l‚Äôapplication (¬´_Privacy by design ¬ª)_ ;
> -   Dans des hypoth√®ses tr√®s pr√©cises, au regard de la finalit√© du traitement (ex : utilisation de l‚Äôapplication pour une recherche), des formalit√©s doivent √™tre r√©alis√©es ;
> -   Il est n√©cessaire de respecter toutes les obligations pr√©vues par le r√®glement europ√©en sur la protection des donn√©es (ex : r√©alisation d‚Äôune analyse d‚Äôimpact, tenue du registre des activit√©s de traitement, information des personnes, etc.).

> ‚ö†Ô∏è **Les donn√©es recueillies doivent √™tre collect√©es pour des finalit√©s d√©termin√©es, explicites et l√©gitimes.** Elles ne peuvent √™tre trait√©es ult√©rieurement pour d‚Äôautres finalit√©s, surtout si elles sont incompatibles avec les finalit√©s pr√©vues initialement.

## ü§ì Les strat√©gies g√©n√©rales de la s√©curisation
	
>![Image securit√©-ergonomie](https://i.imgur.com/fo8BBJr.png)
 La **strat√©gie de s√©curisation d'une application** consiste √† d√©terminer les s√©curit√©s qui vont √™tre mises en place sur une application donner. Il est important de sp√©cifier que si vous tirer plus vers la **s√©curit√©** l'ergonomie de l'application sera impact√©. **Cela est valable dans le sens contraire**.

### üê±‚Äçüíª R√©duction de la surface d'attaque

![Image securit√©-ergonomie](https://i.imgur.com/O55lBp6.png)

R√©duire votre **surface d‚Äôattaque** signifie mettre en place le plus de **protection en place** pour ainsi √™tre moins **vuln√©rable √† des attaques** ce qui laisse aux attaquants moins de moyens d‚Äôeffectuer des attaques.
### D√©fense en profondeur


### üîí Moindre privil√®ge

![Moindre privil√®ges](https://www.zscaler.fr/cdn-cgi/image/format%3Dauto/sites/default/files/images/page/xyz/zscaler-least-privilege-access-diagram-1.png)

Le **moindre privil√®ges** consiste a un syst√®me de **r√¥les hi√©rarchique**. Ces r√¥les on pour but de v√©rifier si la personnes a la permission d'acc√©der a une **ressource ou un services**.

### ‚õ® D√©fense en profondeur

![Image de la d√©fense en profondeur](https://www.riskinsight-wavestone.com/wp-content/uploads/2016/02/image1.png)

La d√©fense en profondeur consiste √† s√©curiser son application **couche par couche** plut√¥t qu‚Äô√† concentrer la protection √† **un seul point de l‚Äôapplication**.

## üíÇ S√©curisation Client


## Inclusion de s√©curit√© de contenus de tiers


- CORS: **Permet √† un site A d'autoriser le site B √† lire des donn√©es (potentiellement priv√©es) du site A (√† l'aide du navigateur et des informations d'identification du visiteur, elle permet √©galement de contourner le SOP)**


- SOP: **Partage des ressources entre diff√©rents sites Web,  mais emp√™che la lecture des informations de r√©ponse HTTP**

- CSP: **Permet √† un site de s'emp√™cher de charger du contenu (potentiellement malveillant) √† partir de sources inattendues ou inconnus.**

- SRI: **Permet d‚Äôexposer, via l‚Äôattribut d√©di√© integrity, le r√©sultat attendu d‚Äôun hash r√©aliser sur un fichier ressources et le comparer au hash attendu et bloquer la ressource si les empreintes sont diff√©rentes.**

## üç™ Cookie

![](https://oko.uk/wp-content/uploads/2019/12/cookie-types.jpg)

- Un **cookie** est un petit morceau de texte qui est **automatiquement enregistr√©** sur votre ordinateur par un **site** lorsque vous le parcourez.

Il permet au site de vous **reconna√Ætre** et de conserver des **informations sp√©cifiques √† votre sujet**, comme vos donn√©es de connexion ou vos pr√©f√©rences linguistiques, et ce, afin que vous n‚Äôayez pas √† vous r√©-enregistrer √† chaque visite.

## üñ±Ô∏è ClickJacking

![](https://cdn.invicti.com/statics/img/ogimage/clickjacking-attacks.png)

 - Le **ClickJacking** (d√©tournement de clic) est **une attaque qui am√®ne un utilisateur √† cliquer sur un √©l√©ment de page Web qui est invisible ou d√©guis√© en un autre √©l√©ment** . Cela peut amener les utilisateurs √† t√©l√©charger involontairement des logiciels malveillants, √† visiter des pages Web malveillantes, √† fournir des informations d'identification ou des informations sensibles, √† transf√©rer de l'argent ou √† acheter des produits en ligne.
 
 ## üîá Requete silencieuse
 
![](https://s4.aconvert.com/convert/p3r68-cdx67/ah2o8-mac89.jpg)

 - Certaines fonctionnalit√©s de la sp√©cification HTML permettent de demander au navigateur d‚Äô√©mettre des requ√™tes silencieuses sans passer par l‚Äôex√©cution de code JavaScript ou CSS. Comme tout comportement qui conduit le navigateur d‚Äôune victime √† initier une connexion de mani√®re silencieuse, ces requ√™tes sont potentiellement ind√©sirables et pr√©sentent des risques allant de la fuite d‚Äôinformations jusqu‚Äô√† l‚Äôexploitation de failles CSRF en passant par la r√©alisation d‚Äôattaques par d√©ni de service distribu√© (DDoS).

## üì¢ HTTPS / TLS / HSTS

![](https://cdn.searchenginejournal.com/wp-content/uploads/2021/08/what-is-https-6135eef3423dc-sej-1520x800.jpg)

- Le protocole de transfert hypertexte s√©curis√© (HTTPS) est la version s√©curis√©e de [HTTP](https://www.cloudflare.com/learning/ddos/glossary/hypertext-transfer-protocol-http/) , qui est le principal protocole utilis√© pour envoyer des donn√©es entre un navigateur Web et un site Web. HTTPS est crypt√© afin d'augmenter la s√©curit√© du transfert de donn√©es. Ceci est particuli√®rement important lorsque les utilisateurs transmettent des donn√©es sensibles, par exemple en se connectant √† un compte bancaire, √† un service de messagerie ou √† un fournisseur d'assurance maladie.

> HTTPS emp√™che les sites Web de diffuser leurs informations d'une mani√®re facilement visible par toute personne fouinant sur le r√©seau.

###  TLS 

![](https://sectigostore.com/blog/wp-content/uploads/2020/05/tls-1-3-tls-version.jpg)

- **Transport Layer Security**, ou **TLS**, est un protocole de s√©curit√© largement adopt√© con√ßu pour faciliter la confidentialit√© et la s√©curit√© des donn√©es pour les communications sur Internet. Un cas d'utilisation principal de TLS est le chiffrement de la communication entre les applications Web et les serveurs, tels que les navigateurs Web qui chargent un site Web. TLS peut √©galement √™tre utilis√© pour chiffrer d'autres communications telles que les e-mails, la messagerie et la voix sur IP (VoIP) .

> Le chiffrement TLS peut aider √† prot√©ger les applications Web contre les violations de donn√©es et autres attaques. Aujourd'hui, HTTPS prot√©g√© par TLS est une pratique standard pour les sites Web. Le navigateur Google Chrome a progressivement s√©vi contre les sites non HTTPS , et d'autres navigateurs ont embo√Æt√© le pas. Les internautes de tous les jours se m√©fient davantage des sites Web qui ne pr√©sentent pas l'ic√¥ne de cadenas HTTPS.

###  HSTS

![](https://really-simple-ssl.com/wp-content/uploads/2022/09/Really-Simple-SSL-Visuals_Tekengebied-1-kopie.svg)

- Il est n√©cessaire de mettre en ≈ìuvre HSTS afin de limiter les risques d‚Äôattaque de type Man-In-The-Middle dus √† des acc√®s non s√©curis√©s g√©n√©r√©s par les utilisateurs ou par un attaquant.

‚ö†Ô∏è  **la p√©rennit√© de l‚Äôacc√®s en HTTPS est un pr√©requis indispensable √† HSTS, qui rendra l‚Äôacc√®s en clair impossible.** 

Le mise en ≈ìuvre de HSTS se fait par la transmission d‚Äôun en-t√™te HTTP lors de l‚Äôacc√®s au site en HTTPS pour assurer son int√©grit√©. Par d√©faut, la strat√©gie HSTS d‚Äôun site est enregistr√©e par le navigateur lorsqu‚Äôil est visit√© pour la premi√®re fois (trust on first use). Pour combler cette vuln√©rabilit√© initiale, le g√©rant d‚Äôun site peut d√©cider de l‚Äôinscrire √† une ¬´ liste pr√©charg√©e ¬ª (voir HSTS preload 10) de sites accessibles seulement en HTTPS, connue √† l‚Äôavance par les navigateurs.

## üìã Politique de s√©curit√© des mot de passe

![](https://d1fmx1rbmqrxrr.cloudfront.net/zdnet/optim/i/edit/ne/2017/08/politique-mot-de-passe-620__w1200.jpg)

Il est recommand√© de mettre en place une politique de s√©curit√© des mots passe adapt√©e au contexte et aux objectifs de s√©curit√© du syst√®me d‚Äôinformation.

- ‚ö†Ô∏è Pour cela il est recommander de suivre ce qui est dit par l'Anssi

	- **Imposer une longueur minimale pour les mots de passe**
	- **Ne pas imposer de longueur maximale pour les mots de passe**
	- **Mettre en ≈ìuvre des r√®gles sur la complexit√© des mots de passe**
	- **Ne pas imposer par d√©faut de d√©lai d'expiration sur les mots de passe des comptes non sensibles**
	- **Imposer un d√©lai d'expiration sur les mots de passe des comptes √† privil√®ges**
	- **R√©voquer imm√©diatement les mots de passe en cas de compromission suspect√©e ou av√©r√©e**
	- **Mettre en place un contr√¥le de la robustesse des mots de passe lors de leur**
	- **Utiliser un sel al√©atoire long**

## üíÇ S√©curisation Backend

![S√©curisation backend illustrions](https://geekflare.com/wp-content/uploads/2021/09/Backend-solution.png)

## üì∞ Journalisation

![](https://kinsta.com/fr/wp-content/uploads/sites/4/2022/08/journalisation-laravel.png)

Les journaux d‚Äô√©v√©nements constituent une brique technique indispensable √† la gestion de la s√©curit√© des syst√®mes d‚Äôinformation. L‚Äôactivit√© de journalisation est un moyen de d√©tection des incidents de s√©curit√© et d‚Äôanalyse du comportement d‚Äôun site ou d‚Äôune application web. Cette activit√© concerne la phase de conception de l‚Äôapplication, pour la g√©n√©ration de journaux (ex. tra√ßabilti√© d‚Äôun changement de privil√®ges), ainsi que la phase d‚Äôexploitation de l‚Äôapplication, pour laquelle l‚Äôapplication des Recommandations de s√©curit√© pour la mise en ≈ìuvre d‚Äôun syst√®me de journalisation est n√©cessaire. En effet, les recommandations portant sur l‚Äôhorodatage des √©v√©nements ainsi que sur la synchronisation des horloges entre les composants sont particuli√®rement pertinentes dans le cas d‚Äôune application web, bien souvent d√©compos√©e en plusieurs services amen√©s √† g√©n√©rer leurs propres journaux de fa√ßon isol√©e.

## üßπ Sanitization

![](https://s4.aconvert.com/convert/p3r68-cdx67/aaa57-0b0kd.png)


Cela signifie valider l'entr√©e avant de l'accepter √† la fois sur le client et le serveur, et √©galement filtrer, encoder ou autrement transformer une cha√Æne de texte afin qu'elle ne puisse pas √™tre utilis√©e pour injecter du code en tant que JavaScript, SQL ou d'autres langages. En pr√©vention de l'injection, outre la Sanitization, une option consiste √† utiliser des versions param√©tr√©es des API, comme l'envoi d'entr√©es en tant que param√®tres de liaison aux instructions pr√©par√©es √† la base de donn√©es.

## üóÑÔ∏è Strat√©gie de sauvegarde

![](https://www.bemsp.fr/wp-content/uploads/2016/10/3-2-1-Datto.png)

Une strat√©gie de sauvegarde est un plan con√ßu pour garantir que les donn√©es essentielles de l'entreprise sont sauvegard√©es et pr√™tes √† √™tre restaur√©es en cas de perte de donn√©es. Les entreprises souffrent de tous les temps d'arr√™t d√ªs √† la perte de donn√©es, il est donc crucial de minimiser les temps d'arr√™t autant que possible. La sauvegarde et reprise d‚Äôactivit√© apr√®s incident sont essentielles pour garantir la continuit√© des op√©rations commerciales.

## Salage / Hashage / Sha256

![](https://connect.geant.org/wp-content/webp-express/webp-images/uploads/2022/01/EaPConnect-CyberSecurity-Workshop-II-990x556.jpg.webp)

üßÇ Le salage de hachage de mot de passe se produit lorsque des donn√©es al√©atoires - un sel - sont utilis√©es comme entr√©e suppl√©mentaire dans une fonction de hachage qui hache un mot de passe. Le but du salage est **de se d√©fendre contre les attaques par dictionnaire ou les attaques contre les mots de passe hach√©s**


üî™ Le  **hachage**, ou hashing en anglais, consiste litt√©ralement √† " hacher " des donn√©es, un message ou encore un texte afin de les r√©duire √† une suite de caract√®res de courte longueur, appel√©e condensat. Pour cela, il faut utiliser un  **algorithme de hachage**.

Trois imp√©ratifs doivent √™tre respect√©s :

-   La  **fonction de hachage**  doit √™tre √† sens unique ;
-   Il ne doit pas y avoir de collisions ; une fonction de hachage parfaite doit √™tre en mesure d'√©viter toute collision ;
-   La fonction de hachage doit √™tre rapide pour √™tre efficace ;
-   La moindre modification du contenu ou message d'origine doit entra√Æner une modification cons√©quente de la valeur de hachage.

**Sha256** est une fonction de **hachage** elle permet de ne pas stocker les mots de passe en clair dans la base de donn√©e  mais uniquement de stocker une empreinte de ces derniers. Il est important d‚Äôutiliser un algorithme public r√©put√© fort afin de calculer les dites empreintes. **A ce jour, MD5 ne fait plus partie des algorithmes r√©put√©s forts**.


> De m√™me, les fonctions de hachage publiques r√©put√©es fortes √©tant par nature √† la disposition de tous, il est techniquement possible pour tout un chacun de calculer des empreintes. Aujourd‚Äôhui, on trouve facilement sur internet des dictionnaires immenses d‚Äôempreintes MD5 pr√©calcul√©es et, gr√¢ce √† ces donn√©es, il est ais√© de retrouver instantan√©ment le mot de passe ayant √©t√© utilis√© afin de g√©n√©rer ces empreintes. Afin de limiter ce risque, il est conseill√© d‚Äôutiliser des fonctions sp√©cialis√©es appel√©es ¬´ fonction de d√©rivation de cl√© ¬ª, telles que PBKDF2 ou Argon2 par exemple, qui sont con√ßues sp√©cifiquement pour stocker des mots de passe.


## üé´ Authentification et Autorisation

![](https://www.okta.com/sites/default/files/styles/1640w_scaled/public/media/image/2020-10/Authentication_vs_Authorization.png?itok=uBFRCfww)

L‚Äôauthentification est un m√©canisme faisant intervenir deux entit√©s distinctes : un prouveur et un v√©rifieur comme illustr√© par la figure 1.  

- Le prouveur cherche √† prouver son identit√© au v√©rifieur. Il s‚Äôagit par exemple pour le prouveur de d√©montrer sa connaissance d‚Äôune donn√©e secr√®te comme un mot de passe. 
- Le v√©rifieur doit √™tre capable de s‚Äôassurer de la validit√© de l‚Äôidentit√© du prouveur. Il s‚Äôagit par exemple pour le v√©rifieur de contr√¥ler l‚Äôexactitude du mot de passe fourni par le prouveur.

![Prouveur et v√©rifieur sch√©ma](https://cdn.discordapp.com/attachments/440551059753140235/1037141818875314306/unknown.png)

Un prouveur est un utilisateur du syst√®me d‚Äôinformation cherchant √† s‚Äôauthentifier. Le v√©rifieur est quant √† lui classiquement un serveur du syst√®me d‚Äôinformation qui a la charge de v√©rifier l‚Äôidentit√© d‚Äôun utilisateur. 

Une √©tape pr√©alable √† l‚Äôauthentification est l‚Äô√©tape de l‚Äôenregistrement. Cette √©tape consiste √† enregistrer un prouveur (son identit√©, son moyen d‚Äôauthentification, etc.) aupr√®s d‚Äôun v√©rifieur. Cela correspond par exemple √† la cr√©ation d‚Äôun compte sur un site Web.

 L‚Äôauthentification est pr√©c√©d√©e par une phase d‚Äôidentification (parfois implicite) qui consiste, pour le prouveur, √† annoncer son identit√© sans prouver cette derni√®re. Par exemple, il peut s‚Äôagir d‚Äôun nom d‚Äôutilisateur √† renseigner.

**R√©sumer des diff√©rentes menace**

- **Recherche exhaustive**
	- Limite temporelle entre chaque essai (contre les attaquants en ligne) et fonctions de hachage it√©ratives d√©di√©es (contre les attaquants en ligne et hors ligne)
- **Recherche par dictionnaire**
	- Mots de passe robustes et al√©atoires et coffrefort de mots de passe
- **Tables pr√©-calcul√©es (rainbow table)**
	- Sel al√©atoire long
- **Hame√ßonnage, ing√©nierie sociale**
	- Authentification multifacteur
## ‚õî Strict mode

![](https://nhidev.github.io/assets/img/strict-mode.jpg)

La syntaxe, pour d√©clarer le mode strict, a √©t√© con√ßue pour √™tre compatible avec les anciennes versions de JavaScript.

Compiler un litt√©ral num√©rique (4 + 5;) ou un litt√©ral de cha√Æne ("John Doe";) dans un programme JavaScript n'a aucun effet secondaire. Il se compile simplement en une variable non existante et meurt.

Cela n'a donc `"use strict";`d'importance que pour les nouveaux compilateurs qui en "comprennent" le sens.

## Pourquoi le mode strict ?

Le mode strict facilite l'√©criture de JavaScript "s√©curis√©".

Le mode strict transforme la "mauvaise syntaxe" pr√©c√©demment accept√©e en v√©ritables erreurs.

Par exemple, en JavaScript normal, la saisie erron√©e d'un nom de variable cr√©e une nouvelle variable globale. En mode strict, cela g√©n√©rera une erreur, rendant impossible la cr√©ation accidentelle d'une variable globale.

En JavaScript normal, un d√©veloppeur ne recevra aucun retour d'erreur en attribuant des valeurs aux propri√©t√©s non inscriptibles.

En mode strict, toute affectation √† une propri√©t√© non inscriptible, une propri√©t√© getter uniquement, une propri√©t√© inexistante, une variable inexistante ou un objet inexistant g√©n√®re une erreur.

## üõÖ Sessions

![](https://windowsreport.com/wp-content/uploads/2021/04/session-recording.jpg)

Une **session Web** est une s√©rie d'actions contigu√´s d'un visiteur sur un site Web individuel dans un laps de temps donn√©. Cela peut inclure vos recherches sur les moteurs de recherche, le remplissage d'un formulaire pour recevoir du contenu, le d√©filement d'une page de site Web, l'ajout d'articles √† un panier, la recherche de billets d'avion ou les pages que vous avez consult√©es sur un seul site Web. Toute interaction que vous avez avec un seul site Web est enregistr√©e en tant que session Web sur la propri√©t√© de ce site Web.

>Pour √©viter de stocker des quantit√©s massives d'informations dans le navigateur, les d√©veloppeurs utilisent des identifiants de session pour stocker les informations c√¥t√© serveur tout en permettant la confidentialit√© des utilisateurs. Chaque fois qu'un utilisateur effectue une action ou fait une demande sur une application Web, l'application renvoie l'ID de session et l'ID de cookie au serveur, ainsi qu'une description de l'action elle-m√™me.

‚ö†Ô∏è Il est recommand√© qu‚Äôune session authentifi√©e ait une dur√©e maximale de validit√©. Les secrets temporaires de sessions (comme des cookies par exemple) doivent avoir une dur√©e de vie limit√©e. Il est ainsi recommand√© de forcer la r√©-authentification des utilisateurs apr√®s une p√©riode adapt√©e au cas d‚Äôusage.

## üîè RBAC

![](https://assets-global.website-files.com/622642781cd7e96ac1f66807/62d0f09bf0c56e7859434cb7_052021-Harness-Blogpost-CD-ShareCard-RBAC.png)

Le contr√¥le d'acc√®s bas√© sur les r√¥les (RBAC), √©galement connu sous le nom de s√©curit√© bas√©e sur les r√¥les, est un m√©canisme qui restreint l'acc√®s au syst√®me. Cela implique de d√©finir des autorisations et des privil√®ges pour permettre l'acc√®s aux utilisateurs autoris√©s. La plupart des grandes entreprises utilisent le contr√¥le d'acc√®s bas√© sur les r√¥les pour fournir √† leurs employ√©s diff√©rents niveaux d'acc√®s en fonction de leurs r√¥les et responsabilit√©s. Cela prot√®ge [les donn√©es sensibles](https://www.imperva.com/learn/data-security/sensitive-data/) et garantit que les employ√©s peuvent uniquement acc√©der aux informations et effectuer les actions dont ils ont besoin pour faire leur travail.

## üóùÔ∏è Token (JWT)

![](https://www.cronj.com/blog/wp-content/uploads/JWT-1.png)

JSON Web Token (JWT) est une norme ouverte ( [RFC 7519](https://tools.ietf.org/html/rfc7519) ) qui d√©finit un moyen compact et autonome pour transmettre en toute s√©curit√© des informations entre les parties en tant qu'objet JSON. Ces informations peuvent √™tre v√©rifi√©es et approuv√©es car elles sont sign√©es num√©riquement. Les JWT peuvent √™tre sign√©s √† l'aide d'un secret (avec l' algorithme **HMAC** ) ou d'une paire de cl√©s publique/priv√©e utilisant **RSA** ou **ECDSA** .

Bien que les JWT puissent √™tre chiffr√©s pour assurer √©galement le secret entre les parties, nous nous concentrerons sur les jetons _sign√©s ._ Les jetons sign√©s peuvent v√©rifier l' _int√©grit√©_ des revendications qu'ils contiennent, tandis que les jetons chiffr√©s _cachent_ ces revendications aux autres parties. Lorsque les jetons sont sign√©s √† l'aide de paires de cl√©s publique/priv√©e, la signature certifie √©galement que seule la partie d√©tenant la cl√© priv√©e est celle qui l'a sign√©e.

### Avantages de l'utilisation de jetons

-  **L'authentification bas√©e sur les jetons est plus √©volutive et efficace**

	- Comme nous savons que les jetons doivent √™tre stock√©s du c√¥t√© de l'utilisateur, ils offrent une solution 			√©volutive.

	- De plus, le serveur a juste besoin de cr√©er et de v√©rifier les jetons avec les informations, ce qui signifie qu'il est possible de maintenir plus d'utilisateurs sur un site Web ou une application √† la fois sans aucun probl√®me.
	
- **Flexibilit√© et performances**

	- La flexibilit√© et les performances globales am√©lior√©es sont d'autres aspects importants en ce qui concerne l'authentification bas√©e sur les jetons, car ils peuvent √™tre utilis√©s sur plusieurs serveurs et ils peuvent offrir une authentification pour divers sites Web et applications √† la fois.

	- Cela contribue √† encourager davantage d'opportunit√©s de collaboration entre les entreprises et les plates-formes pour une exp√©rience sans faille.
	
- **Les jetons offrent une s√©curit√© robuste**

	- √âtant donn√© que les jetons comme JWT sont sans √©tat, seule une cl√© secr√®te peut la valider lorsqu'elle est re√ßue dans une application c√¥t√© serveur, qui a √©t√© utilis√©e pour la cr√©er.

	- Par cons√©quent, ils sont consid√©r√©s comme le moyen le meilleur et le plus s√ªr d'offrir une authentification.

### Inconv√©nients de l'utilisation de jetons

- **Cl√© secr√®te compromise**

	- L'un des principaux inconv√©nients de s'appuyer sur des jetons est qu'il ne repose que sur une seule cl√©. Oui, JWT n'utilise qu'une seule cl√©, ce qui, s'il est mal g√©r√© par un d√©veloppeur/administrateur, entra√Ænerait de graves cons√©quences pouvant compromettre des informations sensibles.

	- Il est essentiel pour les entreprises de rechercher une aide professionnelle associ√©e √† des m√©canismes de s√©curit√© robustes tout en pr√©voyant d'ajouter JWT √† leur m√©canisme d'authentification pour garantir le plus haut niveau de s√©curit√©.
	
-  **Surcharge de donn√©es**

	- La taille globale d'un JWT est bien sup√©rieure √† celle d'un jeton de session normal, ce qui le rend plus long chaque fois que plus de donn√©es y sont ajout√©es.

	- Ainsi, si vous ajoutez plus d'informations dans le jeton, cela aura un impact sur la vitesse de chargement globale et entravera ainsi l'exp√©rience utilisateur.

	- Cette situation peut √™tre corrig√©e si les bonnes pratiques de d√©veloppement sont suivies et que des donn√©es minimales mais essentielles sont ajout√©es au JWT.

-  **Dur√©e de vie plus courte**

	- Les JWT de courte dur√©e sont plus difficiles √† utiliser pour les utilisateurs. Ces jetons n√©cessitent une r√©autorisation fr√©quente, ce qui peut parfois √™tre ennuyeux, en particulier pour les clients.

	- L'ajout de jetons d'actualisation et leur stockage appropri√© est le seul moyen de r√©soudre ce sc√©nario dans lequel des jetons d'actualisation √† longue dur√©e de vie peuvent aider les utilisateurs √† rester autoris√©s pendant une p√©riode plus longue.

## üíæ S√©curisation BDD
## üì° S√©curisation API
